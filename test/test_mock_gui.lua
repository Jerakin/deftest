return function()
	local mock_gui = require "deftest.mock.gui"

	local function animate(node, property, to, easing, duration, delay, callback, playback)
		local co = coroutine.running()
		gui.animate(node, property, to, easing, duration, delay, function(...)
			coroutine.resume(co)
		end, playback)
		coroutine.yield()
	end

	describe("mock.gui", function()
		before(function()
			mock_gui.mock()
		end)

		after(function()
			mock_gui.unmock()
		end)

		it("should be able to create box nodes", function()
			local pos = vmath.vector3(10, 10, 0)
			local size = vmath.vector3(100, 100, 0)
			local node = gui.new_box_node(pos, size)
			assert(node)
			assert(gui.get_position(node) == pos)
			assert(gui.get_size(node) == size)
		end)

		it("should be able to create text nodes", function()
			local pos = vmath.vector3(10, 10, 0)
			local text = "Hello"
			local node = gui.new_text_node(pos, text)
			assert(node)
			assert(gui.get_position(node) == pos)
			assert(gui.get_text(node) == text)
		end)

		it("should be able to clone nodes", function()
			local box_node = gui.new_box_node(vmath.vector3(10, 10, 0), vmath.vector3(100, 100, 0))
			local text_node = gui.new_text_node(vmath.vector3(10, 10, 0), "Hello")
			assert(box_node)
			assert(text_node)
			
			local box_clone = gui.clone(box_node)
			assert(box_clone)
			assert(gui.get_position(box_clone) == gui.get_position(box_node) )
			assert(gui.get_size(box_clone) == gui.get_size(box_node))

			local text_clone = gui.clone(text_node)
			assert(text_clone)
			assert(gui.get_position(text_clone) == gui.get_position(text_node) )
			assert(gui.get_text(text_clone) == gui.get_text(text_node))
		end)

		it("should be able to get and set node scale", function()
			local node = gui.new_box_node(vmath.vector3(10, 10, 0), vmath.vector3(100, 100, 0))
			assert(node)
			assert(gui.get_scale(node) == vmath.vector3(1, 1, 1))

			local new_scale = vmath.vector3(2, 3, 4)
			gui.set_scale(node, new_scale)
			assert(gui.get_scale(node) == new_scale)
		end)

		it("should be able to get and set node size", function()
			local pos = vmath.vector3(10, 10, 0)
			local size = vmath.vector3(100, 100, 0)
			local node = gui.new_box_node(pos, size)
			assert(node)
			assert(gui.get_position(node) == pos)
			assert(gui.get_size(node) == size)

			local new_size = vmath.vector3(200, 200, 100)
			gui.set_size(node, new_size)
			assert(gui.get_size(node) == new_size)
		end)
				
		it("should be able to delete nodes", function()
			local node1 = gui.new_box_node(vmath.vector3(10, 10, 0), vmath.vector3(100, 100, 0))
			local node2 = gui.new_box_node(vmath.vector3(10, 10, 0), vmath.vector3(100, 100, 0))
			local id1 = gui.get_id(node1)
			local id2 = gui.get_id(node2)
			assert(node1)
			assert(node2)
			gui.delete_node(node1)
			assert(gui.get_node(id1) == nil)
			assert(gui.get_node(id2) == node2)
		end)

		it("should be able to parent nodes", function()
			local child = gui.new_box_node(vmath.vector3(10, 10, 0), vmath.vector3(100, 100, 0))
			local parent = gui.new_box_node(vmath.vector3(10, 10, 0), vmath.vector3(100, 100, 0))
			gui.set_parent(child, parent)
			assert(gui.get_parent(child) == parent)
		end)

		it("should delete child nodes as well as the parent", function()
			local root = gui.new_box_node(vmath.vector3(10, 10, 0), vmath.vector3(100, 100, 0))
			local branch = gui.new_box_node(vmath.vector3(10, 10, 0), vmath.vector3(100, 100, 0))
			local twig = gui.new_box_node(vmath.vector3(10, 10, 0), vmath.vector3(100, 100, 0))
			local leaf = gui.new_box_node(vmath.vector3(10, 10, 0), vmath.vector3(100, 100, 0))
			local root_id = gui.get_id(root)
			local branch_id = gui.get_id(branch)
			local twig_id = gui.get_id(twig)
			local leaf_id = gui.get_id(leaf)
			gui.set_parent(leaf, twig)
			gui.set_parent(twig, branch)
			gui.set_parent(branch, root)
			gui.delete_node(branch)
			assert(gui.get_node(root_id))
			assert(not gui.get_node(branch_id))
			assert(not gui.get_node(twig_id))
			assert(not gui.get_node(leaf_id))
		end)

		it("should create nodes with unique ids", function()
			local node1 = gui.new_box_node(vmath.vector3(10, 10, 0), vmath.vector3(100, 100, 0))
			local node2 = gui.new_box_node(vmath.vector3(10, 10, 0), vmath.vector3(100, 100, 0))
			assert(gui.get_id(node1) ~= gui.get_id(node2))
		end)

		it("should be able to get and set a node id", function()
			local node1 = gui.new_box_node(vmath.vector3(10, 10, 0), vmath.vector3(100, 100, 0))
			local node2 = gui.new_box_node(vmath.vector3(10, 10, 0), vmath.vector3(100, 100, 0))
			gui.set_id(node1, "foobar1")
			gui.set_id(node2, "foobar2")
			assert(gui.get_id(node1) == hash("foobar1"))
			assert(gui.get_id(node2) == hash("foobar2"))
		end)
				
		it("should be able to get a node based on id", function()
			local node1 = gui.new_box_node(vmath.vector3(10, 10, 0), vmath.vector3(100, 100, 0))
			local node2 = gui.new_box_node(vmath.vector3(10, 10, 0), vmath.vector3(100, 100, 0))
			assert(gui.get_node(gui.get_id(node1)) == node1)
			assert(gui.get_node(gui.get_id(node2)) == node2)
		end)
		
		it("should be able to pick a box node", function()
			local pos = vmath.vector3(10, 10, 0)
			local size = vmath.vector3(100, 100, 0)
			local node = gui.new_box_node(pos, size)
			assert(not gui.pick_node(node, 0, 0))
			assert(gui.pick_node(node, pos.x, pos.y))
			assert(gui.pick_node(node, pos.x + size.x, pos.y + size.y))
		end)

		it("should be able to enable and disable a node", function()
			local node = gui.new_box_node(vmath.vector3(10, 10, 0), vmath.vector3(100, 100, 0))
			assert(gui.is_enabled(node))
			gui.set_enabled(node, false)
			assert(not gui.is_enabled(node))
			gui.set_enabled(node, true)
			assert(gui.is_enabled(node))
		end)

		it("should be able to animate a node", function()
			local node = gui.new_box_node(vmath.vector3(10, 10, 0), vmath.vector3(100, 100, 0))
			local to = vmath.vector3(50, 80, 0)
			animate(node, gui.PROP_POSITION, to, gui.EASING_LINEAR, 1)
			assert(node.position == to)
		end)

		it("should be able to cancel an animation on a node", function()
			local node = gui.new_box_node(vmath.vector3(10, 10, 0), vmath.vector3(100, 100, 0))
			local to = vmath.vector3(50, 80, 0)
			gui.animate(node, gui.PROP_POSITION, to, gui.EASING_LINEAR, 1)
			gui.cancel_animation(node, gui.PROP_POSITION)
			assert(node.position ~= to)
		end)
				
	end)
end
